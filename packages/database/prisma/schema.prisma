// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//generator client {
//  provider = "prisma-client-js"
//  output   = "./generated/lang"
//}
//generator typegraphql {
//  provider               = "typegraphql-prisma"
//  output                 = "./generated/lang-ts"
//  customPrismaImportPath = "../lang"
//}

enum Lang {
  uk
  en
  es
  pl
  de
  fr
  ru
}

enum TranslationProvider {
  deepl
  reverso
  google
}

enum PartOfSpeech {
  adjective // ADJ // adjective	*big, old, green, incomprehensible, first*
  adposition // ADP // adposition	*in, to, during*
  adverb // ADV // adverb	*very, tomorrow, down, where, there*
  auxiliary // AUX // auxiliary	*is, has (done), will (do), should (do)*
  conjunction // CONJ // conjunction	*and, or, but*
  coordinating // CCONJ // coordinating conjunction	*and, or, but*
  determiner // DET // determiner	*a, an, the*
  interjection // INTJ // interjection	*psst, ouch, bravo, hello*
  noun // NOUN // noun	*girl, cat, tree, air, beauty*
  numeral // NUM // numeral	*1, 2017, one, seventy-seven, IV, MMXIV*
  particle // PART //particle	*‚Äôs, not,*
  pronoun // PRON //pronoun	*I, you, he, she, myself, themselves, somebody*
  proper // PROPN //proper noun	*Mary, John, London, NATO, HBO*
  punctuation // PUNCT //punctuation	*., (, ), ?*
  subordinating // SCONJ //subordinating conjunction	*if, while, that*
  symbol // SYM //symbol	*$, %, ¬ß, ¬©, +, ‚àí, √ó, √∑, =, :), üòù*
  verb // VERB //verb	*run, runs, running, eat, ate, eating*
  other // X //other	*sfpksdpsxmsa*
  space // SPACE //space
}

type SimpleTranslations {
  from_lang Lang
  from_text String
  to_lang   Lang
  to_text   String
}

type Meaning {
  pos       PartOfSpeech?
  to_text   String
  sentences SimpleTranslations[]
}

model caches {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  key   String   @unique
  value Json
  meta  Json?
  tags  String[] @default([])
}

model translations {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  from_lang Lang
  from_text String
  to_lang   Lang
  to_text   String
  meanings  Meaning[]
  provider  TranslationProvider

  @@unique([from_text, from_lang, to_lang, provider])
}

model words {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  //  range        Int
  //  freq         Int
  word        String
  lang        Lang
  //  translations TranslationWitchProviders[]
  deleted_at  DateTime?
  answers     answers[]
  repetitions repetitions[]
}

model langs {
  name String
  code Lang   @id @map("_id")
  flag String
}

model sets {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String   @unique // eg en_news or pl_web_0.3
  name        String
  description String
  icon        String
  tags        String[]
  lang        Lang
  freq_sum    Int // derived
  words_count Int // derived

  author    users?  @relation(fields: [author_id], references: [id])
  author_id String? @db.ObjectId

  frequencies frequencies[]
  courses     courses[]
}

model frequencies {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  set_id String @db.ObjectId
  set    sets   @relation(fields: [set_id], references: [id])
  word   String
  range  Int
  freq   Int

  @@unique([set_id, word])
}

model sessions {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       users     @relation(fields: [user_id], references: [id])
  user_id    String    @db.ObjectId
  started_at DateTime
  ended_at   DateTime?
}

model sentences {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  text  String
  lang  Lang
  words String[]

  @@unique([text, lang])
}

enum UserRole {
  admin
}

model users {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  answers       answers[]
  repetitions   repetitions[]
  sessions      sessions[]
  email         String        @unique()
  name          String
  avatar        String
  password      String?
  created_at    DateTime      @default(now())
  last_login_at DateTime?

  sets sets[]

  // TOTO: waiting for https://github.com/prisma/prisma/issues/3387
  //  default_course    courses?  @relation("default_course", fields: [default_course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  default_course_id String?    @db.ObjectId
  courses           courses[]  @relation("courses_started_by_user")
  roles             UserRole[] @default([])

  @@unique([default_course_id, id])
}


type Range {
  from Int
  to   Int
}

model courses {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  source_set_id  String        @db.ObjectId
  source_set     sets          @relation(fields: [source_set_id], references: [id])
  target_lang    Lang
  history_ranges Range[]
  repetitions    repetitions[]
  iteration      Int

  user    users     @relation("courses_started_by_user", fields: [user_id], references: [id])
  user_id String    @db.ObjectId
  answers answers[]
}

model answers {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  word_id      String       @db.ObjectId
  answer       String
  source       Lang
  target       Lang
  displayed_at DateTime
  answered_at  DateTime?
  word         words        @relation(fields: [word_id], references: [id])
  word_range   Int
  is_correct   Boolean
  user         users        @relation(fields: [user_id], references: [id])
  user_id      String       @db.ObjectId
  course       courses      @relation(fields: [course_id], references: [id])
  course_id    String       @db.ObjectId
  repetition   repetitions?
  iteration    Int          @default(0)
}

type RepetitionsHistory {
  super_memo       SuperMemo
  created_at       DateTime
  answered_at      DateTime  @default(now())
  prev_answer_id   String    @db.ObjectId
  next_answer_id   String    @db.ObjectId
  prev_iteration   Int
  next_iteration   Int
  prev_correctness Float
  next_correctness Float
}

type SuperMemo {
  interval   Int
  repetition Int
  efactor    Float
}

model repetitions {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  user                 users                @relation(fields: [user_id], references: [id])
  user_id              String               @db.ObjectId
  source               Lang
  target               Lang
  course               courses              @relation(fields: [course_id], references: [id])
  course_id            String               @db.ObjectId
  answer               answers              @relation(fields: [answer_id], references: [id])
  answer_id            String               @unique @db.ObjectId
  word                 words                @relation(fields: [word_id], references: [id])
  word_id              String               @db.ObjectId
  history              RepetitionsHistory[]
  created_at           DateTime             @default(now())
  created_at_iteration Int
  iteration            Int
  super_memo           SuperMemo

  @@unique([user_id, course_id, iteration])
}
